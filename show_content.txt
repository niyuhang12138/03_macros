DeriveInput {
    attrs: [],
    vis: Visibility::Inherited,
    ident: Ident {
        ident: "Direction",
        span: #0 bytes(54..63),
    },
    generics: Generics {
        lt_token: None,
        params: [],
        gt_token: None,
        where_clause: None,
    },
    data: Data::Enum {
        enum_token: Enum,
        brace_token: Brace,
        variants: [
            Variant {
                attrs: [],
                ident: Ident {
                    ident: "Up",
                    span: #0 bytes(70..72),
                },
                fields: Fields::Unnamed {
                    paren_token: Paren,
                    unnamed: [
                        Field {
                            attrs: [],
                            vis: Visibility::Inherited,
                            mutability: FieldMutability::None,
                            ident: None,
                            colon_token: None,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                ident: "DirectionUp",
                                                span: #0 bytes(73..84),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ],
                },
                discriminant: None,
            },
            Comma,
            Variant {
                attrs: [],
                ident: Ident {
                    ident: "Down",
                    span: #0 bytes(91..95),
                },
                fields: Fields::Unit,
                discriminant: None,
            },
            Comma,
        ],
    },
}
